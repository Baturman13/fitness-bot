# bot.py
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import config
import database
import nutrition_parser
import feedback
import recommendations
import dialog_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AGE, GENDER, HEIGHT, WEIGHT, TARGET_WEIGHT, ACTIVITY, GOAL = range(7)

class FitnessBot:
    def __init__(self):
        self.db = database.Database()
        self.parser = nutrition_parser.NutritionParser()
        self.feedback_system = feedback.FeedbackSystem()
        self.recommendation_system = recommendations.RecommendationSystem()
        self.dialog_system = dialog_system.DialogSystem()
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        self.user_last_messages = {}
        self.user_temp_data = {}
    
    def set_bot(self, bot):
        self.feedback_system.set_bot(bot)
        self.bot = bot
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å)
    async def delete_previous_message(self, user_id, chat_id):
        if user_id in self.user_last_messages:
            try:
                message_id = self.user_last_messages[user_id]
                await self.bot.delete_message(chat_id=chat_id, message_id=message_id)
                del self.user_last_messages[user_id]
            except Exception:
                pass
    
    async def send_message_and_save_id(self, chat_id, user_id, text, **kwargs):
        await self.delete_previous_message(user_id, chat_id)
        message = await self.bot.send_message(chat_id=chat_id, text=text, **kwargs)
        self.user_last_messages[user_id] = message.message_id
        return message

    # –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self.db.add_user(user.id, user.first_name)
        
        welcome_text = (
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
            
            "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–º–Ω—ã–π FitnessBot!</b>\n"
            "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:\n\n"
            
            "üçΩÔ∏è <b>–£–º–Ω—ã–π —É—á–µ—Ç –ø–∏—Ç–∞–Ω–∏—è:</b>\n"
            "‚Ä¢ 800+ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –±–ª—é–¥ –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤\n"
            "‚Ä¢ –ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏\n"
            "‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏\n"
            "‚Ä¢ –õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –≤–∏—Ç–∞–º–∏–Ω—ã\n"
            "‚Ä¢ –ë—ã—Ç–æ–≤—ã–µ –º–µ—Ä—ã: —Ç–∞—Ä–µ–ª–∫–∏, —Å—Ç–∞–∫–∞–Ω—ã, –ª–æ–∂–∫–∏\n\n"
            
            "üí¨ <b>–î–∏–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º:</b>\n"
            "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏\n"
            "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n"
            "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–±–∞–≤–∫–∞—Ö\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É\n\n"
            
            "üìä <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "‚Ä¢ –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
            
            "üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å—ä–µ–ª–∏: '–≥—Ä–µ—á–∫–∞ —Ç–∞—Ä–µ–ª–∫–∞' –∏–ª–∏ '–ø—Ä–æ—Ç–µ–∏–Ω 2 –ª–æ–∂–∫–∏'\n"
            "‚Ä¢ –ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å: '–∫–∞–∫ –ø–æ—Ö—É–¥–µ—Ç—å?'\n"
            "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ\n\n"
            
            "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/profile - —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è\n"
            "/analysis - –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è\n"
            "/advice - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "/training - —Å–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n"
            "/supplements - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–±–∞–≤–∫–∞—Ö\n"
            "/progress - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "/help - –ø–æ–º–æ—â—å\n\n"
            
            "üß™ <b>–ë–æ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ</b>\n"
            "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã! –ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ üí¨"
        )
        
        await update.message.reply_text(welcome_text, parse_mode='HTML')
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é FitnessBot</b>\n\n"
            
            "üçΩÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥—ã (–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏):</b>\n"
            "‚Ä¢ '–≥—Ä–µ—á–∫–∞ —Ç–∞—Ä–µ–ª–∫–∞' - –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞\n"
            "‚Ä¢ '–ø—Ä–æ—Ç–µ–∏–Ω 2 –ª–æ–∂–∫–∏' - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏\n"
            "‚Ä¢ '–ø–∏–≤–æ –±—É—Ç—ã–ª–∫–∞' - –∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏\n"
            "‚Ä¢ '–≤–∏—Ç–∞–º–∏–Ω—ã 1 —à—Ç' - –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –≤–∏—Ç–∞–º–∏–Ω—ã\n"
            "‚Ä¢ '—Å–∞–ª–∞—Ç –æ–ª–∏–≤—å–µ –ø–æ—Ä—Ü–∏—è' - —Å–ª–æ–∂–Ω—ã–µ –±–ª—é–¥–∞\n\n"
            
            "üí¨ <b>–î–∏–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∂–∏–º:</b>\n"
            "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:\n"
            "‚Ä¢ '–ö–∞–∫ –ø–æ—Ö—É–¥–µ—Ç—å?'\n"
            "‚Ä¢ '–ö–∞–∫–∏–µ –¥–æ–±–∞–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å?'\n"
            "‚Ä¢ '–°–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –¥–æ–º–∞'\n"
            "‚Ä¢ '–ß—Ç–æ –µ—Å—Ç—å –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?'\n\n"
            
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            "/stats - –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/stats 2days - –∑–∞ 2 –¥–Ω—è\n"
            "/stats week - –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            "/stats month - –∑–∞ –º–µ—Å—è—Ü\n"
            "/stats year - –∑–∞ –≥–æ–¥\n\n"
            
            "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
            "/profile - —Å–æ–∑–¥–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/analysis - –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
            "/advice - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "/training - —Å–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n"
            "/supplements - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–±–∞–≤–∫–∞—Ö\n"
            "/progress - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
            
            "üí° <b>–°–æ–≤–µ—Ç:</b> –ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–∞–Ω–¥–æ–π /profile"
        )
        
        await update.message.reply_text(help_text, parse_mode='HTML')

    # –°–ò–°–¢–ï–ú–ê –ü–†–û–§–ò–õ–Ø (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        existing_profile = self.db.get_user_profile(user.id)
        
        if existing_profile:
            profile_text = (
                f"üë§ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
                f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {existing_profile.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"‚öß –ü–æ–ª: {existing_profile.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üìè –†–æ—Å—Ç: {existing_profile.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω')} —Å–º\n"
                f"‚öñÔ∏è –í–µ—Å: {existing_profile.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥\n"
                f"üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {existing_profile.get('target_weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥\n"
                f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {existing_profile.get('activity_level', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üìà –¶–µ–ª—å: {existing_profile.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
                f"–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å? –ù–∞–ø–∏—à–∏—Ç–µ /profile"
            )
            await update.message.reply_text(profile_text, parse_mode='HTML')
        else:
            await self.start_profile_creation(update, context)
    
    async def start_profile_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self.user_temp_data[user.id] = {}
        
        text = (
            "üë§ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            "–î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ –≤–∞—Å.\n\n"
            "üìÖ <b>–®–∞–≥ 1 –∏–∑ 7: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>25</i>"
        )
        
        await self.send_message_and_save_id(update.effective_chat.id, user.id, text, parse_mode='HTML')
        return AGE
    
    async def get_age(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        try:
            age = int(update.message.text)
            if age < 10 or age > 100:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100 –ª–µ—Ç)")
                return AGE
            
            self.user_temp_data[user.id]['age'] = age
            
            keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            
            text = (
                "‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "‚öß <b>–®–∞–≥ 2 –∏–∑ 7: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª</b>"
            )
            
            await self.send_message_and_save_id(update.effective_chat.id, user.id, text, parse_mode='HTML')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=reply_markup)
            return GENDER
            
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º")
            return AGE
    
    async def get_gender(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        gender = update.message.text.lower()
        
        if gender in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π']:
            self.user_temp_data[user.id]['gender'] = 'male' if gender == '–º—É–∂—Å–∫–æ–π' else 'female'
            
            text = (
                "‚úÖ –ü–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "üìè <b>–®–∞–≥ 3 –∏–∑ 7: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>175</i>"
            )
            
            await self.send_message_and_save_id(update.effective_chat.id, user.id, text, parse_mode='HTML')
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ä–æ—Å—Ç:", reply_markup=ReplyKeyboardRemove())
            return HEIGHT
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return GENDER
    
    async def get_height(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        try:
            height = float(update.message.text)
            if height < 100 or height > 250:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º)")
                return HEIGHT
            
            self.user_temp_data[user.id]['height'] = height
            
            text = (
                "‚úÖ –†–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "‚öñÔ∏è <b>–®–∞–≥ 4 –∏–∑ 7: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–≥</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>70.5</i>"
            )
            
            await self.send_message_and_save_id(update.effective_chat.id, user.id, text, parse_mode='HTML')
            return WEIGHT
            
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º")
            return HEIGHT
    
    async def get_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        try:
            weight = float(update.message.text)
            if weight < 30 or weight > 300:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")
                return WEIGHT
            
            self.user_temp_data[user.id]['weight'] = weight
            
            text = (
                "‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "üéØ <b>–®–∞–≥ 5 –∏–∑ 7: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å –≤ –∫–≥</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>65</i>"
            )
            
            await self.send_message_and_save_id(update.effective_chat.id, user.id, text, parse_mode='HTML')
            return TARGET_WEIGHT
            
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º")
            return WEIGHT
    
    async def get_target_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        try:
            target_weight = float(update.message.text)
            if target_weight < 30 or target_weight > 300:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å (30-300 –∫–≥)")
                return TARGET_WEIGHT
            
            self.user_temp_data[user.id]['target_weight'] = target_weight
            
            keyboard = [['–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è', '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            
            text = (
                "‚úÖ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "üèÉ <b>–®–∞–≥ 6 –∏–∑ 7: –£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
                "‚Ä¢ –ù–∏–∑–∫–∞—è - —Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
                "‚Ä¢ –°—Ä–µ–¥–Ω—è—è - –ª–µ–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 —Ä–∞–∑–∞/–Ω–µ–¥–µ–ª—é\n"
                "‚Ä¢ –í—ã—Å–æ–∫–∞—è - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 —Ä–∞–∑/–Ω–µ–¥–µ–ª—é\n"
                "‚Ä¢ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
            )
            
            await self.send_message_and_save_id(update.effective_chat.id, user.id, text, parse_mode='HTML')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
            return ACTIVITY
            
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º")
            return TARGET_WEIGHT
    
    async def get_activity(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        activity = update.message.text.lower()
        
        activity_map = {
            '–Ω–∏–∑–∫–∞—è': 'sedentary',
            '—Å—Ä–µ–¥–Ω—è—è': 'moderate', 
            '–≤—ã—Å–æ–∫–∞—è': 'active',
            '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è': 'very_active'
        }
        
        if activity in activity_map:
            self.user_temp_data[user.id]['activity_level'] = activity_map[activity]
            
            keyboard = [['–ü–æ—Ö—É–¥–µ–Ω–∏–µ', '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ', '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            
            text = (
                "‚úÖ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "üìà <b>–®–∞–≥ 7 –∏–∑ 7: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å</b>"
            )
            
            await self.send_message_and_save_id(update.effective_chat.id, user.id, text, parse_mode='HTML')
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:", reply_markup=reply_markup)
            return GOAL
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return ACTIVITY
    
    async def get_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        goal = update.message.text.lower()
        
        goal_map = {
            '–ø–æ—Ö—É–¥–µ–Ω–∏–µ': 'lose',
            '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ': 'maintain', 
            '–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã': 'gain'
        }
        
        if goal in goal_map:
            self.user_temp_data[user.id]['goal'] = goal_map[goal]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile_data = self.user_temp_data[user.id]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—Ç–æ—á–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
            daily_needs = self.recommendation_system.calculate_daily_needs(profile_data)
            if daily_needs:
                profile_data.update(daily_needs)
            
            self.db.save_user_profile(user.id, profile_data)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            del self.user_temp_data[user.id]
            
            text = (
                "üéâ <b>–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üìä <b>–í–∞—à–∏ —Å—É—Ç–æ—á–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:</b>\n"
                f"üî• –ö–∞–ª–æ—Ä–∏–∏: {daily_needs['daily_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
                f"‚öñÔ∏è –ë–µ–ª–∫–∏: {daily_needs['daily_protein']}–≥\n"
                f"ü•ë –ñ–∏—Ä—ã: {daily_needs['daily_fat']}–≥\n"
                f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {daily_needs['daily_carbs']}–≥\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /advice –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤"
            )
            
            await self.send_message_and_save_id(update.effective_chat.id, user.id, text, parse_mode='HTML')
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=ReplyKeyboardRemove())
            return ConversationHandler.END
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return GOAL
    
    async def cancel_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if user.id in self.user_temp_data:
            del self.user_temp_data[user.id]
        
        await self.send_message_and_save_id(update.effective_chat.id, user.id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ", parse_mode='HTML')
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    # –ö–û–ú–ê–ù–î–ê –î–û–ë–ê–í–û–ö
    async def supplements_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        supplements_text = (
            "üß™ <b>–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</b>\n\n"
            
            "üí™ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏:</b>\n"
            "‚Ä¢ –ü—Ä–æ—Ç–µ–∏–Ω - —Ä–æ—Å—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º—ã—à—Ü\n"
            "‚Ä¢ –ö—Ä–µ–∞—Ç–∏–Ω - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã\n"
            "‚Ä¢ BCAA - –∑–∞—â–∏—Ç–∞ –º—ã—à—Ü –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
            "‚Ä¢ –ì–µ–π–Ω–µ—Ä - –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã\n"
            "‚Ä¢ L-–∫–∞—Ä–Ω–∏—Ç–∏–Ω - –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ\n"
            "‚Ä¢ –û–º–µ–≥–∞-3 - –∑–¥–æ—Ä–æ–≤—å–µ —Å—É—Å—Ç–∞–≤–æ–≤ –∏ —Å–µ—Ä–¥—Ü–∞\n\n"
            
            "üíä <b>–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –≤–∏—Ç–∞–º–∏–Ω—ã:</b>\n"
            "‚Ä¢ –í–∏—Ç–∞–º–∏–Ω D - –∏–º–º—É–Ω–∏—Ç–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
            "‚Ä¢ –ú–∞–≥–Ω–∏–π - —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ —Å–æ–Ω\n"
            "‚Ä¢ –¶–∏–Ω–∫ - —Ç–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç\n"
            "‚Ä¢ –ú–µ–ª–∞—Ç–æ–Ω–∏–Ω - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω\n\n"
            
            "üìù <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫:</b>\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ: '–ø—Ä–æ—Ç–µ–∏–Ω 30–≥' –∏–ª–∏ '–≤–∏—Ç–∞–º–∏–Ω—ã 1 —à—Ç'\n\n"
            
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–µ—Ä–µ–¥ –ø—Ä–∏–µ–º–æ–º –¥–æ–±–∞–≤–æ–∫ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º!"
        )
        
        await update.message.reply_text(supplements_text, parse_mode='HTML')

    # –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    async def analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞ 7 –¥–Ω–µ–π
        analytics = self.db.get_period_stats(user.id, days=7)
        
        analysis_text = (
            f"üìä <b>–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ 7 –¥–Ω–µ–π</b>\n\n"
            f"üìÖ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {analytics['days_count']}\n"
            f"üçΩ –í—Å–µ–≥–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {analytics['meal_count']}\n"
            f"üî• –°—ä–µ–¥–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {analytics['total_calories']}\n"
            f"‚öñÔ∏è –ë–µ–ª–∫–∏: {analytics['total_protein']}–≥\n"
            f"ü•ë –ñ–∏—Ä—ã: {analytics['total_fat']}–≥\n"
            f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {analytics['total_carbs']}–≥\n"
            f"üìà –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {analytics['avg_daily_calories']}\n\n"
        )
        
        # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        if analytics['common_foods']:
            analysis_text += "üçé <b>–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:</b>\n"
            for i, (product, count, weight) in enumerate(analytics['common_foods'], 1):
                analysis_text += f"{i}. {product}: {count} —Ä–∞–∑\n"
        
        await update.message.reply_text(analysis_text, parse_mode='HTML')
    
    async def advice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        profile = self.db.get_user_profile(user.id)
        analytics = self.db.get_period_stats(user.id, days=7)
        
        if not profile:
            text = (
                "‚ùå <b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile"
            )
            await update.message.reply_text(text, parse_mode='HTML')
            return
        
        recommendations_list = self.recommendation_system.generate_nutrition_recommendations(profile, analytics)
        
        advice_text = "üí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é</b>\n\n"
        for i, recommendation in enumerate(recommendations_list, 1):
            advice_text += f"{i}. {recommendation}\n"
        
        await update.message.reply_text(advice_text, parse_mode='HTML')
    
    async def training_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        profile = self.db.get_user_profile(user.id)
        
        if not profile:
            text = (
                "‚ùå <b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile"
            )
            await update.message.reply_text(text, parse_mode='HTML')
            return
        
        recommendations_list = self.recommendation_system.generate_training_recommendations(profile)
        
        training_text = "üí™ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º</b>\n\n"
        for i, recommendation in enumerate(recommendations_list, 1):
            training_text += f"{i}. {recommendation}\n"
        
        await update.message.reply_text(training_text, parse_mode='HTML')
    
    async def progress_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        profile = self.db.get_user_profile(user.id)
        analytics = self.db.get_period_stats(user.id, days=30)
        
        if not profile:
            text = (
                "‚ùå <b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile"
            )
            await update.message.reply_text(text, parse_mode='HTML')
            return
        
        progress_analysis = self.recommendation_system.get_progress_analysis(profile, analytics)
        
        progress_text = (
            f"üìà <b>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</b>\n\n"
            f"{progress_analysis}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:</b>\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {analytics['avg_daily_calories']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {analytics['meal_count']}\n"
            f"‚Ä¢ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {analytics['days_count']}\n\n"
            f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Å–æ–±–æ–π!"
        )
        
        await update.message.reply_text(progress_text, parse_mode='HTML')

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = user.id
        text = update.message.text.strip()
        
        print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}: '{text}'")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–≤–æ–¥–æ–º –µ–¥—ã
        is_food = self.parser.is_food_input(text)
        print(f"üçΩÔ∏è –≠—Ç–æ –µ–¥–∞? {is_food}")
        
        if is_food:
            print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –µ–¥–∞")
            nutrition_data = self.parser.parse_input(text)
            
            if nutrition_data:
                print(f"üìä –î–∞–Ω–Ω—ã–µ –µ–¥—ã: {nutrition_data}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                success = self.db.add_meal(user_id, nutrition_data)
                if success:
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–æ–∫ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤
                extra_info = ""
                if nutrition_data['type'] == '–¥–æ–±–∞–≤–∫–∞':
                    supplement_info = self.parser.get_supplement_info(nutrition_data['product'])
                    extra_info = f"\nüí° {supplement_info}"
                elif nutrition_data['type'] == '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ':
                    extra_info = "\n‚ö†Ô∏è –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!"
                elif nutrition_data['type'] == '–∞–ª–∫–æ–≥–æ–ª—å':
                    extra_info = "\nüç∑ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º–µ –∫–∞–ª–æ—Ä–∏–π"
                
                response = (
                    f"‚úÖ <b>–ó–∞–ø–∏—Å–∞–ª –ø—Ä–∏–µ–º –ø–∏—â–∏:</b>\n"
                    f"üçΩ {nutrition_data['product']} - {nutrition_data['weight']}–≥\n"
                    f"üî• ~{nutrition_data['calories']} –∫–∫–∞–ª\n"
                    f"‚öñÔ∏è –ë–µ–ª–∫–∏: {nutrition_data['protein']}–≥\n"
                    f"ü•ë –ñ–∏—Ä—ã: {nutrition_data['fat']}–≥\n"
                    f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {nutrition_data['carbs']}–≥"
                    f"{extra_info}"
                )
                await update.message.reply_text(response, parse_mode='HTML')
                print("üì® –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                # –ï–°–õ–ò –ü–†–û–î–£–ö–¢ –ù–ï –ù–ê–ô–î–ï–ù - –ß–ï–¢–ö–û –°–û–û–ë–©–ê–ï–ú
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: '{text}'")
                response = (
                    "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n" 
                    "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞\n\n"
                    "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–∫:</b>\n"
                    "‚Ä¢ '–≥—Ä–µ—á–∫–∞ —Ç–∞—Ä–µ–ª–∫–∞'\n"
                    "‚Ä¢ '—è–±–ª–æ–∫–æ 2 —à—Ç'\n"
                    "‚Ä¢ '–ø—Ä–æ—Ç–µ–∏–Ω 30–≥'\n\n"
                    f"<i>–û—Ç–ª–∞–¥–∫–∞: '{text}'</i>"
                )
                await update.message.reply_text(response, parse_mode='HTML')
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –µ–¥–∞, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –¥–∏–∞–ª–æ–≥
            print("üí¨ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –¥–∏–∞–ª–æ–≥")
            profile = self.db.get_user_profile(user_id)
            response = self.dialog_system.generate_response(text, profile)
            await update.message.reply_text(response, parse_mode='HTML')

    # –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –° –í–´–ë–û–†–û–ú –ü–ï–†–ò–û–î–ê
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        period = context.args[0] if context.args else 'today'
        
        if period == 'today':
            stats = self.db.get_daily_stats(user_id)
            period_text = stats.get('period', '—Å–µ–≥–æ–¥–Ω—è')
        elif period == '2days':
            stats = self.db.get_period_stats(user_id, days=2)
            period_text = stats['period']
        elif period == 'week':
            stats = self.db.get_period_stats(user_id, days=7)
            period_text = stats['period']
        elif period == 'month':
            stats = self.db.get_period_stats(user_id, days=30)
            period_text = stats['period']
        elif period == 'year':
            stats = self.db.get_monthly_stats(user_id, months=12)
            period_text = stats['period']
        else:
            stats = self.db.get_daily_stats(user_id)
            period_text = stats.get('period', '—Å–µ–≥–æ–¥–Ω—è')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è</b>\n"
            f"‚è∞ –ü–µ—Ä–∏–æ–¥: <i>{period_text}</i>\n\n"
            f"üçΩ –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {stats['meal_count']}\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {stats['total_calories']} –∫–∫–∞–ª\n"
            f"‚öñÔ∏è –ë–µ–ª–∫–∏: {stats['total_protein']}–≥\n"
            f"ü•ë –ñ–∏—Ä—ã: {stats['total_fat']}–≥\n"
            f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {stats['total_carbs']}–≥\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –±–æ–ª—å—à–µ 1 –¥–Ω—è
        if 'avg_daily_calories' in stats and stats['avg_daily_calories'] > 0:
            stats_text += f"üìà –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {stats['avg_daily_calories']} –∫–∫–∞–ª\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
        if 'common_foods' in stats and stats['common_foods']:
            stats_text += f"\nüçé <b>–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:</b>\n"
            for i, (product, count, weight) in enumerate(stats['common_foods'], 1):
                stats_text += f"{i}. {product}: {count} —Ä–∞–∑\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞
        stats_text += (
            f"\nüí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:</b>\n"
            f"/stats today - –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/stats 2days - –∑–∞ 2 –¥–Ω—è\n" 
            f"/stats week - –∑–∞ –Ω–µ–¥–µ–ª—é\n"
            f"/stats month - –∑–∞ –º–µ—Å—è—Ü\n"
            f"/stats year - –∑–∞ –≥–æ–¥"
        )
        
        await update.message.reply_text(stats_text, parse_mode='HTML')
    
    async def handle_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        if context.args:
            feedback_text = " ".join(context.args)
            self.feedback_system.add_feedback(user.id, feedback_text)
            
            response = (
                "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!</b>\n\n"
                "–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. "
                "–í–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º –±–æ—Ç–∞ –ª—É—á—à–µ! üöÄ\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –∏–¥–µ–∏ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /feedback"
            )
            await update.message.reply_text(response, parse_mode='HTML')
        else:
            help_text = (
                "üí° <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –º–Ω–µ–Ω–∏–µ–º!</b>\n\n"
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, –∞ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å. "
                "–ú—ã —á–∏—Ç–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –±–æ—Ç–∞.\n\n"
                "‚úçÔ∏è <b>–ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:</b>\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ <code>/feedback –≤–∞—à —Ç–µ–∫—Å—Ç</code>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/feedback –î–æ–±–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–æ–¥–µ</code>"
            )
            await update.message.reply_text(help_text, parse_mode='HTML')

def main():
    try:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
        bot = FitnessBot()
        
        application = Application.builder().token(config.TOKEN).build()
        bot.set_bot(application.bot)
        
        # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        profile_conv_handler = ConversationHandler(
            entry_points=[CommandHandler('profile', bot.start_profile_creation)],
            states={
                AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_age)],
                GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_gender)],
                HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_height)],
                WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_weight)],
                TARGET_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_target_weight)],
                ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_activity)],
                GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_goal)],
            },
            fallbacks=[CommandHandler('cancel', bot.cancel_profile)]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", bot.start))
        application.add_handler(CommandHandler("help", bot.help_command))
        application.add_handler(CommandHandler("stats", bot.show_stats))
        application.add_handler(CommandHandler("feedback", bot.handle_feedback))
        application.add_handler(CommandHandler("analysis", bot.analysis_command))
        application.add_handler(CommandHandler("advice", bot.advice_command))
        application.add_handler(CommandHandler("training", bot.training_command))
        application.add_handler(CommandHandler("supplements", bot.supplements_command))
        application.add_handler(CommandHandler("progress", bot.progress_command))
        application.add_handler(profile_conv_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
        
        print("ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        print("üåê –†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω—ã–π (VS Code)")
        print("üìä –î–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!")
        print("üçΩÔ∏è –ë–∞–∑–∞: 800+ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤")
        
        # –ó–ê–ü–£–°–ö –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()